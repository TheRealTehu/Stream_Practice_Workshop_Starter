package org.example.repository;

import org.example.model.Patient;
import org.example.model.enums.Gender;

import java.time.LocalDate;
import java.time.Period;
import java.util.Comparator;
import java.util.List;
import java.util.function.ToDoubleFunction;
import java.util.stream.Collectors;

import static java.util.Comparator.reverseOrder;

public class PatientRepository {
    private List<Patient> patients;

    public PatientRepository(List<Patient> patients) {
        this.patients = patients;
    }

    public List<Patient> listAllPatients() {
        return patients;
    }

    public List<Patient> listPatientsOlderThan30() {
        return patients.stream().filter(p -> p.getAge() > 30).collect(Collectors.toList());
        //return listPatientsOlderThanGivenAge(30);
    }

    public List<Patient> listPatientsOlderThanGivenAge(int age) {
        return patients.stream().filter(p -> p.getAge() > age).collect(Collectors.toList());
    }

    public List<Patient> listPatientsFromGivenBirthPlace(String birthPlace) {
        return patients.stream().filter(p -> p.getBirthPlace().equals(birthPlace)).collect(Collectors.toList());
    }

    public List<Patient> listPatientsWhoHasWrongAgeGiven() {
        return patients.stream().filter(p -> Period.between(p.getDateOfBirth(), LocalDate.now()).getYears() != p.getAge()).collect(Collectors.toList());
    }

    public List<Patient> listMalePatientsWithGivenBirthPlace(String birthPlace) {
        return patients.stream().filter(p -> p.getBirthPlace().equals(birthPlace) && p.getGender().equals(Gender.MALE)).collect(Collectors.toList());
    }

    public List<Patient> listFemalePatientsWhereFirstNameAndLastNameStartsWithSameLetter() {
        return patients.stream().filter(p -> p.getGender().equals(Gender.FEMALE) && p.getFirstName().startsWith(String.valueOf(p.getLastName().charAt(0)))).collect(Collectors.toList());
    }

    public List<Patient> listTopTenPatientsBasedOnPriorityScore() {
        //TODO: Priority score is generated by the formula: 0.9 * lowPriorityProblems + 1.1 * mediumPriorityProblems + 1.5 * highPriorityProblems

        return patients.stream()
                .sorted(Comparator.comparingDouble(Patient::getPatientScore).reversed()).limit(10).collect(Collectors.toList());
    }
}